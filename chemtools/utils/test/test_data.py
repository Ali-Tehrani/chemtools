# -*- coding: utf-8 -*-
# ChemTools is a collection of interpretive chemical tools for
# analyzing outputs of the quantum chemistry calculations.
#
# Copyright (C) 2016-2019 The ChemTools Development Team
#
# This file is part of ChemTools.
#
# ChemTools is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 3
# of the License, or (at your option) any later version.
#
# ChemTools is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>
#
# --
"""Expected values computed with other softwares for testing purposes."""

import numpy as np


def load_data_gaussian_cubegen_ch4_uhf_ccpvdz():
    """Load data computed with Gaussian09_C.01's cubegen for ch4_uhf_ccpvdz.fchk."""
    # coordinates of points generated by CubeGen with spacing=1.5, padding=0.5 & rotation=False
    points = np.array([[-1.50003968e+00, -2.24996410e+00, -2.25000756e+00],
                       [-1.50003968e+00, -2.24996410e+00, -7.50007559e-01],
                       [-1.50003968e+00, -2.24996410e+00,  7.49992441e-01],
                       [-1.50003968e+00, -7.49964095e-01, -2.25000756e+00],
                       [-1.50003968e+00, -7.49964095e-01, -7.50007559e-01],
                       [-1.50003968e+00, -7.49964095e-01,  7.49992441e-01],
                       [-1.50003968e+00,  7.50035905e-01, -2.25000756e+00],
                       [-1.50003968e+00,  7.50035905e-01, -7.50007559e-01],
                       [-1.50003968e+00,  7.50035905e-01,  7.49992441e-01],
                       [-3.96834136e-05, -2.24996410e+00, -2.25000756e+00],
                       [-3.96834136e-05, -2.24996410e+00, -7.50007559e-01],
                       [-3.96834136e-05, -2.24996410e+00,  7.49992441e-01],
                       [-3.96834136e-05, -7.49964095e-01, -2.25000756e+00],
                       [-3.96834136e-05, -7.49964095e-01, -7.50007559e-01],
                       [-3.96834136e-05, -7.49964095e-01,  7.49992441e-01],
                       [-3.96834136e-05,  7.50035905e-01, -2.25000756e+00],
                       [-3.96834136e-05,  7.50035905e-01, -7.50007559e-01],
                       [-3.96834136e-05,  7.50035905e-01,  7.49992441e-01]])
    # density evaluated by Gaussian09_C.01's cubegen through kind=gradient
    density = np.array([1.20197E-03, 4.97511E-03, 1.58548E-02,
                        1.41180E-02, 4.84137E-02, 2.20902E-01,
                        5.97708E-02, 9.04929E-02, 5.67771E-02,
                        4.06980E-03, 2.96792E-02, 2.13278E-02,
                        2.27637E-02, 1.87497E-01, 1.86016E-01,
                        6.14965E-02, 2.17852E-01, 2.16963E-01])
    # gradient evaluated by Gaussian09_C.01's cubegen through kind=gradient
    gradient = np.array([[ 1.03099E-03,  1.71776E-03,  1.23231E-03],
                         [ 4.92546E-03,  8.25758E-03,  4.89861E-03],
                         [ 8.53328E-03,  3.45392E-02,  3.89404E-03],
                         [ 1.51581E-02,  2.26785E-02,  1.71295E-02],
                         [ 6.71648E-02,  5.67256E-02,  3.68025E-02],
                         [ 1.82417E-01,  1.09969E-01,  2.35543E-01],
                         [ 1.06787E-01, -1.40951E-02,  1.04607E-01],
                         [ 1.50298E-01, -5.10777E-02, -4.80703E-02],
                         [ 6.79556E-02, -8.95081E-02, -1.56085E-02],
                         [ 3.07146E-03,  4.92394E-03,  6.98303E-03],
                         [ 3.56888E-02,  5.20531E-02,  1.90839E-02],
                         [ 5.84257E-03,  4.06678E-02, -1.86760E-02],
                         [-7.37212E-03,  2.70001E-02,  3.99220E-02],
                         [ 8.65628E-02,  1.47124E-01,  1.72183E-01],
                         [-8.15417E-02,  1.54436E-01, -1.67271E-01],
                         [-8.52931E-02, -2.06051E-02,  1.07082E-01],
                         [-1.09788E-01, -1.87020E-01,  8.36944E-02],
                         [ 1.27961E-01, -1.10866E-01, -1.61019E-01]])
    # laplacian evaluated by Gaussian09_C.01's cubegen through kind=laplacian
    laplacian = np.array([4.30771E-03,  2.46131E-02,  4.71552E-02,
                          4.36256E-02,  1.41506E-01, -7.63346E-01,
                          7.87831E-02,  7.60122E-02,  1.21859E-01,
                          1.69881E-02,  8.14542E-02,  8.51142E-02,
                          8.41698E-02, -1.39886E-01, -1.27971E-01,
                          1.02509E-01, -3.84851E-01, -3.77645E-01])
    hessian_xx = np.array([ 6.39670E-04,  5.31444E-03, -9.73403E-03,
                            3.34015E-03,  5.63011E-02, -4.76032E-01,
                            1.22828E-01,  1.52273E-01,  4.16834E-02,
                            9.64439E-04,  3.05205E-02,  8.73851E-03,
                           -8.75343E-03, -8.60908E-02,  2.67597E-03,
                            8.94149E-02, -2.03486E-01, -8.68285E-02])
    # esp evaluated by Gaussian09_C.01's cubegen through kind=potential
    esp = np.array([-2.01184E-03, 8.93049E-03, 3.68800E-02,
                     3.16097E-02, 1.37929E-01, 9.96864E-01,
                     3.74824E-01, 2.10468E-01, 1.52163E-01,
                     3.17287E-03, 6.34498E-02, 3.11248E-02,
                     3.53474E-02, 1.01292E+00, 1.01225E+00,
                     2.07022E-01, 1.02390E+00, 1.02375E+00])
    return points, density, gradient, laplacian, hessian_xx, esp


def load_data_fortran_ch4_uhf_ccpvdz():
    """Load data computed with in-house Fortran code for ch4_uhf_ccpvdz.fchk."""
    # coordinates of points
    points = np.array([[-3, -3, -3,], [-3, -3,  0,], [-3, -3,  3,], [-3,  0, -3,], [-3,  0,  0,],
                       [-3,  0,  3,], [-3,  3, -3,], [-3,  3,  0,], [-3,  3,  3,], [ 0, -3, -3,],
                       [ 0, -3,  0,], [ 0, -3,  3,], [ 0,  0, -3,], [ 0,  0,  0,], [ 0,  0,  3,],
                       [ 0,  3, -3,], [ 0,  3,  0,], [ 0,  3,  3,], [ 3, -3, -3,], [ 3, -3,  0,],
                       [ 3, -3,  3,], [ 3,  0, -3,], [ 3,  0,  0,], [ 3,  0,  3,], [ 3,  3, -3,],
                       [ 3,  3,  0,], [ 3,  3,  3,]], dtype=float)
    # 8th orbital expansion evaluated Fortran by
    exp8 = np.array([ 0.00375367,  0.03178078,  0.05348131,  0.02726712,  0.01400675,
                      0.07445751,  0.02320186,  0.00425437,  0.00577119, -0.02781335,
                     -0.04082439,  0.03324904,  0.03689038,  0.00002702,  0.02901776,
                      0.03288809, -0.04124146, -0.05165096, -0.02892164, -0.05043417,
                     -0.00997580, -0.00024128,  0.00307327, -0.02688246,  0.00031094,
                     -0.04755402, -0.04872100]).reshape(27, 1)
    # 9th orbital expansion evaluated by Fortran code
    exp9 = np.array([ 0.01019334, -0.03985858, -0.04740753,  0.08131806, -0.02842964,
                     -0.06900307,  0.06019631,  0.01863115, -0.01397425,  0.00146082,
                     -0.00519832, -0.01734235,  0.04867160,  0.00004154,  0.01719274,
                      0.06485919, -0.01288644, -0.01262115, -0.00838637, -0.00849781,
                      0.00009801, -0.00910972, -0.01612369,  0.00810636,  0.00485805,
                     -0.02029558, -0.00936400]).reshape(27, 1)
    # density evaluated by Fortran code
    density = np.array([0.00003304, 0.00053319, 0.00019292, 0.00111552, 0.00679461,
                        0.00153604, 0.00015922, 0.00030448, 0.00003973, 0.00045413,
                        0.00754940, 0.00043585, 0.01189345, 120.661406, 0.00488532,
                        0.00085596, 0.00715178, 0.00084528, 0.00015549, 0.00192313,
                        0.00004713, 0.00034775, 0.00541748, 0.00042815, 0.00003358,
                        0.00103735, 0.00021200])
    # gradient evaluated by Fortran code
    gradient = [[ 0.00004568,  0.00005560,  0.00004170], [ 0.00071421,  0.00090481,  0.00031958],
                [ 0.00022178,  0.00030427, -0.00024400], [ 0.00214134,  0.00057641,  0.00147697],
                [ 0.01414091, -0.00274820,  0.00462187], [ 0.00242062, -0.00084759, -0.00266456],
                [ 0.00022914, -0.00024055,  0.00015719], [ 0.00043634, -0.00045833, -0.00009951],
                [ 0.00005359, -0.00006511, -0.00004867], [ 0.00020864,  0.00060902,  0.00073946],
                [ 0.00682003,  0.01554390, -0.00220110], [-0.00020073,  0.00066217, -0.00062608],
                [-0.00943599,  0.00784003,  0.02386404], [-8.40090166,  8.40090054, -4.20041995],
                [-0.00254422, -0.00035925, -0.01023804], [-0.00045752, -0.00160984,  0.00110110],
                [ 0.00513284, -0.01477175,  0.00413479], [ 0.00054025, -0.00119568, -0.00147869],
                [-0.00018878,  0.00016871,  0.00025415], [-0.00340647,  0.00301688, -0.00076147],
                [-0.00005689,  0.00005325, -0.00008253], [-0.00048891, -0.00014071,  0.00053314],
                [-0.01141306, -0.00213317, -0.00009663], [-0.00061368,  0.00022324, -0.00065764],
                [-0.00005222, -0.00004309,  0.00005006], [-0.00184030, -0.00150716,  0.00067124],
                [-0.00029870, -0.00024190, -0.00031205]]
    gradient = np.array(gradient)
    # positive definite KE evaluated by Fortran code
    ke_pd = [0.00002941, 0.00036577, 0.00013191, 0.00082047, 0.00530631,
             0.00113415, 0.00010757, 0.00020285, 0.00003336, 0.00030256,
             0.00574122, 0.00028868, 0.00824769, 5.43470706, 0.00392851,
             0.00061677, 0.00549151, 0.00060841, 0.00010513, 0.00140232,
             0.00003700, 0.00023018, 0.00437588, 0.00028569, 0.00002990,
             0.00076019, 0.00014593]
    # weizsacker KE evaluated Fortran code
    ke_wz = [0.00002617, 0.00033546, 0.00013043, 0.00079549, 0.00421069,
             0.00111306, 0.00010605, 0.00016847, 0.00002982, 0.00026458,
             0.00485089, 0.00024972, 0.00756715, 0.16450352, 0.00285088,
             0.00058608, 0.00457311, 0.00057792, 0.00010346, 0.00138352,
             0.00003417, 0.00019521, 0.00311071, 0.00025077, 0.00002639,
             0.00073611, 0.00014453]
    # thomas-fermi KE evaluated by Fortran code
    ke_tf = [0.00000010, 0.00001007, 0.00000185,    0.00003445, 0.00069986,
             0.00005871, 0.00000134, 0.00000396,    0.00000013, 0.00000770,
             0.00083417, 0.00000719, 0.00177930, 8459.58828066, 0.00040385,
             0.00002216, 0.00076224, 0.00002170,    0.00000129, 0.00008539,
             0.00000018, 0.00000494, 0.00047980,    0.00000698, 0.00000010,
             0.00003052, 0.00000216]
    return points, exp8, exp9, density, gradient, ke_pd, ke_wz, ke_tf
